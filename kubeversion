#!/usr/bin/env bash

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'
DEFAULT_PATH=~/.kubeversion

usage() {
  cat <<"EOF"
USAGE:
  kubeversion              : list kubectl version
  kubeversion <VERSION>    : switch to <VERSION> version if exist
  kubeversion -i <VERSION> : install a specific kubectl version
  kubeversion -d <VERSION> : remove a specific kubectl version

  kubeversion -h, --help   : show help
EOF
}

list_versions() {
  echo -e "Available version : \n$(ls $DEFAULT_PATH | grep _kubectl_ |sed -n -e 's/.*_kubectl_\(v.*\).*/\1/p')"
}

current_version() {
  echo -e "Current version : \n$(ls -l $DEFAULT_PATH | grep -w kubectl |sed -n -e 's/.*_kubectl_\(v.*\).*/\1/p')"
}

set_version() {
  if [[ -z $(ls $DEFAULT_PATH | grep _kubectl_${1}) ]]; then
    echo "error: this version does not exist"
    exit 1
  fi
  $(ln -sf $DEFAULT_PATH/_kubectl_${1} $DEFAULT_PATH/kubectl)
  echo -e "switch to ${1}"
}

install_version() {
  if [[ -z $(curl -s https://api.github.com/repos/kubernetes/kubernetes/git/refs/tags | sed -n -e 's/.*refs\/tags\/\(v.*\)".*/\1/p' | sort | uniq | grep "${1}") ]]; then
    echo "error: this version does not exist"
    exit 1
  fi
  if [[ -z $(ls $DEFAULT_PATH | grep _kubectl_${1}) ]]; then
    if [[ "$(uname)" == "Darwin" ]]; then
      echo "Download kubectl for macos"
      $(curl -s https://storage.googleapis.com/kubernetes-release/release/${1}/bin/darwin/amd64/kubectl -o $DEFAULT_PATH/_kubectl_${1})
      $(chmod +x $DEFAULT_PATH/_kubectl_${1})
    elif [[ "$(uname)" == "Linux" ]]; then
      echo "Download kubectl for linux"
      $(curl -s https://storage.googleapis.com/kubernetes-release/release/${1}/bin/linux/amd64/kubectl -o $DEFAULT_PATH/_kubectl_${1})
      $(chmod +x $DEFAULT_PATH/_kubectl_${1})
    else
      echo "unkwown os"
      exit 1
    fi
  fi
  $(ln -sf $DEFAULT_PATH/_kubectl_${1} $DEFAULT_PATH/kubectl)
}

remove_version() {
  if [[ -z $(ls $DEFAULT_PATH | grep _kubectl_${1}) ]]; then
    echo "error: this version is not installed"
    exit 1
  fi
  if [[ -z $(ls $DEFAULT_PATH | grep -w kubectl | grep ${1}) ]]; then
    echo "error: it's the current version of kubectl, change before delete it : kubeversion <VERSION>"
  else
    $(rm -rf $DEFAULT_PATH/_kubectl_${1})
    echo "version deleted"
  fi
}

main() {
  if [[ ! -d $DEFAULT_PATH ]]; then
    mkdir -p $DEFAUTL_PATH
  fi
  if [[ $(echo $PATH | grep -c $DEFAULT_PATH) -ne 1 ]]; then
    echo "$DEFAULT_PATH is not in PATH env in your env"
    exit 1
  fi
  if [[ "$#" -eq 0 ]]; then
    current_version
    list_versions
  elif [[ "${1}" == "-i" ]]; then
    if [[ "$#" -lt 2 ]]; then
      echo "error: missing kubectl version" >&2
      usage
      exit 1
    else
      install_version "${2}"
    fi
  elif [[ "${1}" == "-d" ]]; then
    if [[ "$#" -lt 2 ]]; then
      echo "error: missing kubectl version" >&2
      usage
      exit 1
    else
      remove_version "${2}"
    fi 
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
    elif [[ "${1}" =~ ^v[1-9]+.[0-9]+.[0-9]+ ]]; then
      set_version "${1}"
    else
      usage
    fi
  else
    usage
  fi
}

main "$@"
